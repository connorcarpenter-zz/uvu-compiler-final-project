class iTree {
    protected int LUE = 42;
    protected iNode root;
    protected bool first;

    iTree() {
	root = null;
    }

    protected int fib(int root) {
	if (root == 0) return 0;
	else if (root == 1) return 1;
	else return (fib(root - 1) + fib(root - 2));
    }

    unprotected bool add(char key) {
	if (root == null) {
	    root = new iNode(key);
	    return true;
	}
	else
	    return insert(key, root);
    }

    protected bool insert(char key, iNode node) {
	if (key < node.root)
	    if (node.left == null) {
		node.left = new iNode(key);
		return true;
	    }
	    else 
		return insert(key, node.left);
	else if (key > node.root)
	    if (node.right == null) {
		node.right = new iNode(key);
		return true;
	    }
	    else
		return insert(key, node.right);
	else { // key == node.root
	     node.inc();
	    return false;
    }
	}

    unprotected void print() {
	first = true;
	inorder(root);
	cout << '\n';
    }
    
    protected void inorder(iNode node) {
	if (node == null) return;

	inorder(node.left);
	visit(node);
	inorder(node.right);
    }

    protected void visit(iNode node) {
	if (first) {
	    first = false;
	    cout << ' ';
	}
	else cout << ',';
	

	cout << node.root;
	cout << '(';
	cout << node.cnt;
	cout << ',';
	cout << fib(node.cnt);
	cout << ')';
    }
}

class iNode {
    unprotected char root;
    unprotected int cnt = 0;
    unprotected iNode left = null;
    unprotected iNode right = null;

    iNode(char key) {
	root = key;
	cnt = 1;
    }

    unprotected void inc() { cnt = cnt + 1; }
}


class Message {
    protected char msg[];
    protected int i;
    protected int end;

    Message() {
    	msg = new char[100];
	msg[0] = 'A';
	msg[1] = 'd'; 
	msg[2] = 'd';
	msg[3] = 'e';
	msg[4] = 'd';
	msg[5] = ' ';
	msg[6] = 'E';
	msg[7] = 'l';
	msg[8] = 'e';
	msg[9] = 'm';
	msg[10] = 'e';
	msg[11] = 'n';
	msg[12] = 't';
	msg[13] = ':';
	i = 14;
	msg[i] = 'D';
	msg[i + 1] = 'u';
	msg[i + 2] = 'p';
	msg[i + 3] = 'l';
	msg[i + 4] = 'i';
	msg[i + 5] = 'c';
	msg[i + 6] = 'a';
	msg[i + 7] = 't';
	msg[i + 8] = 'e';
	msg[i + 9] = ' ';

	msg[24] = 'E';
	msg[25] = 'n';
	msg[26] = 't';
	msg[27] = 'e';
	msg[28] = 'r';
	
    }

    protected void print(int i, int end) {
	while (i <= end) {
	    cout << msg[i];
	    i = i + 1;
	}
    }	


    unprotected void msg1(char elm) {
	print(0, 13);
	cout << elm;
	cout << '\n';
    }


    unprotected bool msg2(char elm) {
	i = 14;
	end = (i + 8);
	print(i, end);
	cout << msg[5];
	print(6, 13);
	cout << elm;
	cout << '\n';
    }
    
    unprotected int msg3() {
	print(24, 28);
	i = 5;
	print(i, i);
	print(6, 13);
    }
}

class Syntax {
      protected int i = 7;
      protected char c = 'a';
      protected bool b = false;

      Syntax(int j, char d) {
         i = j;
         c = d;
      }

      unprotected void checkit() {
         char cc[] = new char[1000];
	 int  ii[] = new int[512];
	 Syntax ss[] = new Syntax[256];


	 cc[1] = cc[2]; // yes
	 cc[31] = cc[1];
	 cc[100] = ' ';
	 cc[10] = c;     // yes
	 
	 ii = ii; 
	 i[4] = 5 + i;
	 ii[5000] = 5 + i; // yes
	 i = ii[0];  // yes

	 ss[0] = new Syntax(7, 'c');
	 ss[i] = ss[i+1]; // yes
	 ss[i+7/3] = new Syntax(i, c); // yes

	 spawn which(ii[0]) set i; 
      } 

      unprotected int which(int i) {
         i = i * i;
	 return i;
      }
}

class Butterfly {
      protected int age = 42;
      protected char type = 'm';

      Butterfly(int age, char type) {
          cout << age;
          cout << '\n';
	  cout << type;
          cout << '\n';
      }

      unprotected void nest() {
          cout << age;
          cout << '\n';
	  cout << type;
          cout << '\n';
      }
}
void kxi2015 main() {
    char key;
    char nl; // newline char
    iTree tree;
    Message msg = new Message();
	Butterfly bff = new Butterfly(37, 'g');
    tree = new iTree();
    

    bff.nest();

    msg.msg3();
    cin >> key;
    cout << '\n';
    while (key != '!') {
	if (tree.add(key)) {
	    msg.msg1(key);
	    tree.print();
	}
	else {
	    msg.msg2(key);
	    tree.print();


	msg.msg3();
	cin >> nl;
	cin >> key;
	cout << '\n';
    }
}
}
