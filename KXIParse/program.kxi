class iTree {
    protected int LUE = 42;
    protected iNode root;
    protected bool first;

    iTree() {
	root = null;
    }

    protected int fib(int jroot) {
		if (jroot == 0) return 0;
		else
		{
			if (jroot == 1)
			{
				return 1;
			}
			else 
				return (fib(jroot - 1) + fib(jroot - 2));
		}
	}

    unprotected bool add(int key) {
	if (root == null) {
	    root = new iNode(key);
	    return true;
	}
	else
	    return insert(key, root);
    }

    protected bool insert(int key, iNode node) {
		if (key < node.root)
			if (node.left == null) {
			node.left = new iNode(key);
			return true;
			}
			else 
			return insert(key, node.left);
		else if (key > node.root)
			if (node.right == null) {
			node.right = new iNode(key);
			return true;
			}
			else
			return insert(key, node.right);
		else { // key == node.root
			 node.inc();
			return false;
		}
	}

    unprotected void print() {
	first = true;
	inorder(root);
	cout << '\n';
    }
    
    protected void inorder(iNode node) {
	if (node == null) return;

	inorder(node.left);
	visit(node);
	inorder(node.right);
    }

    protected void visit(iNode node) {
	if (first) {
	    first = false;
	    cout << ' ';
	}
	else cout << ',';
	

	cout << node.root;
	cout << '(';
	cout << node.cnt;
	cout << ',';
	cout << fib(node.cnt);
	cout << ')';
    }
}

class iNode {
    unprotected int root;
    unprotected int cnt = 0;
    unprotected iNode left = null;
    unprotected iNode right = null;

    iNode(int key) {
	root = key;
	cnt = 1;
    }

    unprotected void inc() { cnt = cnt + 1; }
}


class Butterfly {
      protected int age = 42;
      protected char type = 'm';

      Butterfly(int jage, char jtype) {
          cout << jage;
          cout << '\n';
		cout << jtype;
          cout << '\n';
      }

      unprotected void nest() {
          cout << age;
          cout << '\n';
		  cout << type;
          cout << '\n';
      }
}


class Message {
    protected char msg[];
    protected int i;
    protected int end;

    Message() {
    	msg = new char[100];
	msg[0] = 'A';
	msg[1] = 'd';
	msg[2] = 'd';
	msg[3] = 'e';
	msg[4] = 'd';
	msg[5] = ' ';
	msg[6] = 'E';
	msg[7] = 'l';
	msg[8] = 'e';
	msg[9] = 'm';
	msg[10] = 'e';
	msg[11] = 'n';
	msg[12] = 't';
	msg[13] = ':';
	i = 14;
	msg[i] = 'D';
	msg[i+1] = 'u';
	msg[i+2] = 'p';
	msg[i+3] = 'l';
	msg[i+4] = 'i';
	msg[i+5] = 'c';
	msg[i+6] = 'a';
	msg[i+7] = 't';
	msg[i+8] = 'e';
	msg[i+9] = ' ';

	msg[24] = 'E';
	msg[25] = 'n';
	msg[26] = 't';
	msg[27] = 'e';
	msg[28] = 'r';
	
    }

    protected void print(int j, int jend) {
	while (j <= jend) {
	    cout << msg[j];
	    j = j + 1;
	}
    }	



    
    unprotected int msg3() {
	print(24, 28);
	i = 5;
	print(i, i);
	print(6, 13);
    }
}




void kxi2015 main() {
    Message msg = new Message();
	Butterfly bff = new Butterfly(37, 'g');
	iTree tree = new iTree();

    bff.nest();

    msg.msg3();
}